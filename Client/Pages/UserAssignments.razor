@page "/user/{userId:int}"
@inject HttpClient http
@inject NavigationManager navigation

@if (user == null)
{
    <p>Loading...</p>
}
else
{
    <div class="card edit-detail">
        <header class="card-header">
            <p class="card-header-title">
                @user.Name
            </p>
        </header>
        <div class="card-content">
            @foreach (var assignment in user.Assignments)
            {
                <li role="presentation">
                    <div class="card">
                        <CardContent Name="@assignment.Name"
                             Description="@assignment.Description" />

                       @* <footer class="card-footer">
                            <ButtonFooter Class="edit-item"
                                  IconClasses="fas fa-edit"
                                  OnClick="@(async _ => await SelectUser.InvokeAsync(user))"
                                  Label="Edit" />
                        </footer>*@
                    </div>
                </li>
            }
            @*<div class="content">
                @if (user.Id != 0)
                {
                    <label class="label" for="id">id</label>
                    <input name="id"
                           class="input"
                           value="@user.Id"
                           readonly="readonly" />
                }
                <InputDetail Name="name"
                             Placeholder="Oranges"
                             @bind-Value="user.Name" />
                <InputDetail Name="description"
                             Placeholder="box"
                             @bind-Value="user.Description" />
                <div class="field">
                    <label class="label" for="quantity">
                        quantity
                    </label>
                    <input name="quantity"
                           class="input"
                           type="number"
                           min="1"
                           max="100"
                           value="@user.Weight"
                           placeholder="1"
                           @onchange="@(e => user.Weight = int.Parse(e.Value.ToString()))" />
                </div>
            </div>*@
        </div>
        <footer class="card-footer ">
            <ButtonFooter Class="cancel-button"
                          IconClasses="fas fa-undo"
                          OnClick="@CancelProduct"
                          Label="Cancel" />
            <ButtonFooter Class="save-button"
                          IconClasses="fas fa-save"
                          OnClick="@Save"
                          Label="Save" />
        </footer>
    </div>
}

@code {
    private User user;

    [Parameter] public int UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        user = await http.GetFromJsonAsync<User>($"api/users/{UserId}/assignments");
    }

    private void CancelProduct()
    {
        navigation.NavigateTo("/");
    }

    private async Task Save()
    {
        if (user.Id == 0)
        {
            await http.PostAsJsonAsync("api/products", user);
        }
        else
        {
            await http.PutAsJsonAsync("api/products", user);
        }
        navigation.NavigateTo("/");
    }
}