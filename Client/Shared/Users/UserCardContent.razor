@inject HttpClient http
@inject NavigationManager NavigationManager

<div class="user-card-content" contenteditable="false"
     @onclick="OnClick">
            <div class="symbol">
                <div class="twa-5x @User.Avatar"></div>
            </div>
                    
            <p class="name">@User.Name</p>

    <div class="user-card-details">
        <div class="progress-xp">
            <progress class="progress is-small is-primary" value="@User.XP" max="@User.Goal"></progress>
            <p class="subtitle">@User.XP/@User.Goal</p>
        </div>
        
    </div>
    <div class="user-card-history">
        @if(IsLoadingCompletedAssignmentsToday)
        {
            <progress class="progress is-small is-warning" max="100"></progress>
        }
        
        @foreach (var completedAssignment in CompletedAssignmentsToday.OrderBy(a => a.TimeCompleted))
        {
            <div class="symbols" @onclick="@(async _ => await UndoCompletedAssignmentCallback(completedAssignment))" @onclick:stopPropagation>
                <div class="emoji">
                    <div class="twa-2x @completedAssignment.Assignment.Emoji"></div>
                </div>
                <div class="emoji-modifier">
                    <div class="twa @completedAssignment.Assignment.EmojiModifier"></div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public User User { get; set; }
    [Parameter] public EventCallback OnClick { get; set; }
    private List<CompletedAssignment> CompletedAssignmentsToday { get; set; } = new List<CompletedAssignment>();
    private bool IsLoadingCompletedAssignmentsToday { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        IsLoadingCompletedAssignmentsToday = true;
        CompletedAssignmentsToday = await http.GetFromJsonAsync<List<CompletedAssignment>>($"api/users/{User.RowKey}/completedassignmentstoday");
        StateHasChanged();
        IsLoadingCompletedAssignmentsToday = false;
    }

    private async Task UndoCompletedAssignmentCallback(CompletedAssignment completedAssignment)
    {
        var deleteCompletedAssignmentResult = await http.DeleteAsync($"api/users/{completedAssignment.UserRowKey}/completedassignments/{completedAssignment.RowKey}");
        await OnInitializedAsync();
        NavigationManager.NavigateTo("/users", true);
    }
}