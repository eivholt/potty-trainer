@inject HttpClient http
@inject NavigationManager NavigationManager

<div class="user-card-content" contenteditable="false">
            <div class="symbol">
                <div class="twa-5x @User.Avatar"></div>
            </div>
                    
            <p class="name">@User.Name</p>

    <div class="user-card-details">
        <div class="progress-xp">
            <progress class="progress is-small @XpProgressBarColor @DingStyle" value="@User.XP" max="@User.Goal"></progress>
            <p class="subtitle">@User.XP/@User.Goal</p>
        </div>
        
    </div>
    <div class="user-card-history">

            @if(IsLoadingCompletedAssignments)
            {
                <progress class="progress is-small is-info" max="100"></progress>
            }
        
            @foreach (var completedAssignment in Assignments.OrderBy(a => a.Suggestion).ThenBy(a => a.TimeStamp))
            {
                <div class="symbols @completedAssignment.StyleClass" @onclick="@(async _ => await CompletedAssignmentAction(User.RowKey, completedAssignment))" @onclick:stopPropagation>
                    <div class="emoji">
                        <div class="twa-3x @completedAssignment.Assignment.Emoji"></div>
                    </div>
                    <div class="emoji-modifier">
                        <div class="twa-2x @completedAssignment.Assignment.EmojiModifier"></div>
                    </div>

                    @if (!completedAssignment.Suggestion && completedAssignment.Count > 1)
                    {
                        <div class="assignment-count">
                            @for (int i = 0; i<= completedAssignment.Count;  i++)
                            {
                                <div class="assignment-count-badge"/>
                            }
                        </div>
                    }
                </div>
            }
        @if (!IsLoadingCompletedAssignments)
        {
            <div class="add-completed-assignment button is-primary" @onclick="@(e => NavigateToAssignmentsForUser(User))" @onclick:stopPropagation>
                <i class="fas fa-plus" aria-hidden="true" />
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public User User { get; set; }
    private string XpProgressBarColor 
    {
        get
        {
            if(User.XP >= User.Goal)
            {
                return "is-warning";
            } else
            {
                return "is-primary";
            }
        }
    }

    private string DingStyle 
    {
        get
        {
            if(User.XP >= User.Goal)
            {
                return "ding-style";
            } else
            {
                return "nonding-style";
            }
        }
    }

    private List<GroupedAssignment> Assignments { get; set; } = new List<GroupedAssignment>();
    private bool IsLoadingCompletedAssignments { get; set; } = true;
    private bool IsInputDisabled { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!IsInputDisabled)
        {
            IsInputDisabled = true;
            IsLoadingCompletedAssignments = true;
            var completedAssignmentsToday = await http.GetFromJsonAsync<List<CompletedAssignment>>($"api/users/{User.RowKey}/completedassignmentstoday");
            var completedAssignmentsYesterday = await http.GetFromJsonAsync<List<CompletedAssignment>>($"api/users/{User.RowKey}/completedassignmentsyesterday");

            foreach (var completedAssignmentTodayGroup in completedAssignmentsToday.GroupBy(c => c.AssignmentRowKey))
            {
                Assignments.Add(new GroupedAssignment
                    {
                        Assignment = completedAssignmentTodayGroup.First().Assignment,
                        TimeStamp = completedAssignmentTodayGroup.First().TimeCompleted,
                        CompletedAssignmentRowKey = completedAssignmentTodayGroup.First().RowKey,
                        Suggestion = false,
                        Count = completedAssignmentTodayGroup.Count()
                    });
            }

            foreach (var completedAssignmentYesterday in completedAssignmentsYesterday.DistinctBy(c => c.AssignmentRowKey))
            {
                if (!Assignments.Any(a => a.Assignment.RowKey.Equals(completedAssignmentYesterday.Assignment.RowKey)))
                {
                    Assignments.Add(new GroupedAssignment
                        {
                            Assignment = completedAssignmentYesterday.Assignment,
                            TimeStamp = completedAssignmentYesterday.TimeCompleted,
                            CompletedAssignmentRowKey = completedAssignmentYesterday.RowKey,
                            Suggestion = true,
                            Count = -1
                        });
                }
            }

            IsLoadingCompletedAssignments = false;
            IsInputDisabled = false;
        }
    }

    private async Task CompletedAssignmentAction(string userId, GroupedAssignment groupedAssignment)
    {
        if (!IsInputDisabled)
        {
            IsInputDisabled = true;
            if (groupedAssignment.Suggestion)
            {
                await http.PostAsync($"api/users/{userId}/completedassignment/{groupedAssignment.Assignment.RowKey}", null);
            }
            else
            {
                var deleteCompletedAssignmentResult = await http.DeleteAsync($"api/users/{userId}/completedassignments/{groupedAssignment.CompletedAssignmentRowKey}");
            }
            await OnInitializedAsync();
            NavigationManager.NavigateTo("/users", true);
            IsInputDisabled = false;
        }
    }

    private void NavigateToAssignmentsForUser(User user)
    {
        NavigationManager.NavigateTo($"/user/{user.RowKey}");
    }

    private class GroupedAssignment
    {
        public Assignment Assignment { get; set; }
        public string CompletedAssignmentRowKey { get; set; }
        public DateTime TimeStamp { get; set; }
        public bool Suggestion { get; set; }
        public int Count { get; set; }
        
        public string StyleClass
        {
            get
            {
                if (Suggestion) { return "assignment-suggestion"; }
                else { return "assignment-completed-today"; }
            }
        }
    }
}